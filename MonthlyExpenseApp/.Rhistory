j<-j+1
}
i<-i+1
j<-1
}
##extract Scores
i<-1
Scores<-rep("",length(IPL_heading))
for (i in 1:length(IPL_heading))
{
Scores[i]<-xmlValue(IPL_scores[[i]][[1]])
i<i+1
}
i<-1
j<-34
Scores<-rep("",length(IPL_heading))
for (i in 1:length(IPL_heading))
{
Scores[i]<-xmlValue(IPL_scores[[j]])
j<-j+3
i<-i+1
}
##extract result
i<-1
Result<-rep("",length(IPL_heading))
for (i in 1:length(IPL_heading))
{
Result[i]<-xmlValue(IPL_status[[i]])
i<i+1
}
#extract 5,10,15,20 over scores for Bat First and Bat Second
BF_5_ov_score<-rep("",length(IPL_heading))
BF_5_ov_wkts_lost<-rep("",length(IPL_heading))
BF_10_ov_score<-rep("",length(IPL_heading))
BF_10_ov_wkts_lost<-rep("",length(IPL_heading))
BF_15_ov_score<-rep("",length(IPL_heading))
BF_15_ov_wkts_lost<-rep("",length(IPL_heading))
BF_20_ov_score<-rep("",length(IPL_heading))
BF_20_ov_wkts_lost<-rep("",length(IPL_heading))
BS_5_ov_score<-rep("",length(IPL_heading))
BS_5_ov_wkts_lost<-rep("",length(IPL_heading))
BS_5_ov_Req_RR<-rep("",length(IPL_heading))
BS_10_ov_score<-rep("",length(IPL_heading))
BS_10_ov_wkts_lost<-rep("",length(IPL_heading))
BS_10_ov_Req_RR<-rep("",length(IPL_heading))
BS_15_ov_score<-rep("",length(IPL_heading))
BS_15_ov_wkts_lost<-rep("",length(IPL_heading))
BS_15_ov_Req_RR<-rep("",length(IPL_heading))
BS_20_ov_score<-rep("",length(IPL_heading))
BS_20_ov_wkts_lost<-rep("",length(IPL_heading))
i<-1
for (i in 1:length(IPL_heading))
{
Over_Comp_html<-html(IPL_Match_Links[i])
temp<-Over_Comp_html %>% html_nodes("table") %>% .[[1]] %>% html_table()
BF_5_ov_score[i]<-unlist(strsplit(temp[6,2],"/"))[1]
BF_5_ov_wkts_lost[i]<-unlist(strsplit(temp[6,2],"/"))[2]
BF_10_ov_score[i]<-unlist(strsplit(temp[11,2],"/"))[1]
BF_10_ov_wkts_lost[i]<-unlist(strsplit(temp[11,2],"/"))[2]
BF_15_ov_score[i]<-unlist(strsplit(temp[16,2],"/"))[1]
BF_15_ov_wkts_lost[i]<-unlist(strsplit(temp[16,2],"/"))[2]
BF_20_ov_score[i]<-unlist(strsplit(temp[21,2],"/"))[1]
BF_20_ov_wkts_lost[i]<-unlist(strsplit(temp[21,2],"/"))[2]
BS_5_ov_score[i]<-unlist(strsplit(temp[6,7],"/"))[1]
BS_5_ov_wkts_lost[i]<-unlist(strsplit(temp[6,7],"/"))[2]
BS_5_ov_Req_RR[i]<-temp[6,11]
BS_10_ov_score[i]<-unlist(strsplit(temp[11,7],"/"))[1]
BS_10_ov_wkts_lost[i]<-unlist(strsplit(temp[11,7],"/"))[2]
BS_10_ov_Req_RR[i]<-temp[11,11]
BS_15_ov_score[i]<-unlist(strsplit(temp[16,7],"/"))[1]
BS_15_ov_wkts_lost[i]<-unlist(strsplit(temp[16,7],"/"))[2]
BS_15_ov_Req_RR[i]<-temp[16,11]
BS_20_ov_score[i]<-unlist(strsplit(temp[21,7],"/"))[1]
BS_20_ov_wkts_lost[i]<-unlist(strsplit(temp[21,7],"/"))[2]
}
##convert to a data.frame
IPL<-cbind.data.frame(Match,Teams,Scores,Result,Date,BF_5_ov_score,BF_5_ov_wkts_lost,BF_10_ov_score,BF_10_ov_wkts_lost,BF_15_ov_score,BF_15_ov_wkts_lost,BF_20_ov_score,BF_20_ov_wkts_lost,BS_5_ov_score,BS_5_ov_wkts_lost,BS_5_ov_Req_RR,BS_10_ov_score,BS_10_ov_wkts_lost,BS_10_ov_Req_RR,BS_15_ov_score,BS_15_ov_wkts_lost,BS_15_ov_Req_RR,BS_20_ov_score,BS_20_ov_wkts_lost)
##convert all factors to character variables
IPL<-data.frame(lapply(IPL, as.character), stringsAsFactors=FALSE)
##remove all xml tags \n and \t from all columns
IPL$Match<-str_replace_all(IPL$Match,"[\t\n]","")
IPL$Teams<-str_replace_all(IPL$Teams,"[\t\n]","")
IPL$Scores<-str_replace_all(IPL$Scores,"[\t\n]","")
IPL$Result<-str_replace_all(IPL$Result,"[\t\n]","")
IPL$Date<-str_replace_all(IPL$Date,"[\t\n]","")
return(IPL)
}
All_IPL_Data<-data.frame(Match=character(),Teams=character(),Scores=character(),Result=character(),Date=character(),BF_5_ov_score=character(),BF_5_ov_wkts_lost=character(),BF_10_ov_score=character(),BF_10_ov_wkts_lost=character(),BF_15_ov_score=character(),BF_15_ov_wkts_lost=character(),BF_20_ov_score=character(),BF_20_ov_wkts_lost=character(),BS_5_ov_score=character(),BS_5_ov_wkts_lost=character(),BS_5_ov_Req_RR=character(),BS_10_ov_score=character(),BS_10_ov_wkts_lost=character(),BS_10_ov_Req_RR=character(),BS_15_ov_score=character(),BS_15_ov_wkts_lost=character(),BS_15_ov_Req_RR=character(),BS_20_ov_score=character(),BS_20_ov_wkts_lost=character())
i<-1;
for (i in (1:length(IPL_url)))
{
temp<-Acquire_Data(IPL_url[i])
All_IPL_Data<-rbind(All_IPL_Data,temp)
i<-i+1
}
rm(i,temp,IPL_url)
##remove abandoned matches
All_IPL_Data<-All_IPL_Data[grep("won",All_IPL_Data[,4]),]
#manually fix the Date column where 2 dates are used in 1 column
All_IPL_Data$Date[454]<-"  - May 27, 2014 "
##splitting Match column
All_IPL_Data$Match<-unlist(strsplit(trimws(All_IPL_Data$Match),"\\:"))
##labeling League matches vs Elination Matches
All_IPL_Data[grep("match",All_IPL_Data[,1]),1]<-"League Match"
All_IPL_Data[-grep("match",All_IPL_Data[,1]),1]<-"Elimination Round"
##splitting Teams column --DONE
temp<-as.data.frame(matrix((unlist(strsplit(trimws(All_IPL_Data$Teams),"\\ v |\\ at "))),ncol=3,byrow=TRUE))
All_IPL_Data$Team1<-temp[,1]
All_IPL_Data$Team2<-temp[,2]
All_IPL_Data$Venue<-temp[,3]
rm(temp)
##splitting Scores column
unlist(strsplit(trimws(All_IPL_Data$Scores[1:3]),"\\;|\\/|\\(|\\)"))
#Step1
i<-1
for (i in (1:nrow(All_IPL_Data)))
{
temp<-unlist(strsplit(trimws(All_IPL_Data$Scores[i]),"\\;"))
All_IPL_Data$Bat_First_Score[i]<-temp[1]
All_IPL_Data$Bat_Second_Score[i]<-temp[2]
i<-i+1
}
#step2
i<-1
for (i in (1:nrow(All_IPL_Data)))
{
temp<-unlist(strsplit(trimws(All_IPL_Data$Bat_First_Score[i]), split = "(?=[0-9])", perl = T))
All_IPL_Data$Team_Batting_First[i]<-temp[1]
temp<-unlist(strsplit(trimws(All_IPL_Data$Bat_Second_Score[i]), split = "(?=[0-9])", perl = T))
All_IPL_Data$Team_Batting_Second[i]<-temp[1]
i<-i+1
}
All_IPL_Data$Team_Batting_First <- trimws(All_IPL_Data$Team_Batting_First)
All_IPL_Data$Team_Batting_Second <- trimws(All_IPL_Data$Team_Batting_Second)
#step3
i<-1
for (i in (1:nrow(All_IPL_Data)))
{
temp<-unlist(strsplit(trimws(gsub("[^0123456789./ ]","",All_IPL_Data$Bat_First_Score[i])),"\\ "))
All_IPL_Data$Bat_First_Runs[i]<-temp[1]
All_IPL_Data$Bat_First_Overs[i]<-temp[2]
temp<-unlist(strsplit(trimws(gsub("[^0123456789./ ]","",All_IPL_Data$Bat_Second_Score[i])),"\\ "))
All_IPL_Data$Bat_Second_Runs[i]<-temp[1]
All_IPL_Data$Bat_Second_Overs[i]<-temp[2]
i<-i+1
}
step#4
i<-1
for (i in (1:nrow(All_IPL_Data)))
{
temp<-unlist(strsplit(All_IPL_Data$Bat_First_Runs[i],"/"))
All_IPL_Data$Bat_First_Runs_Scored[i]<-temp[1]
if (!is.na(temp[2])) {All_IPL_Data$Bat_First_Wickets_Lost[i]<-temp[2]}
if (is.na(temp[2])) {All_IPL_Data$Bat_First_Wickets_Lost[i]<-10}
temp<-unlist(strsplit(All_IPL_Data$Bat_Second_Runs[i],"/"))
All_IPL_Data$Bat_Second_Runs_Scored[i]<-temp[1]
if (!is.na(temp[2])) {All_IPL_Data$Bat_Second_Wickets_Lost[i]<-temp[2]}
if (is.na(temp[2])) {All_IPL_Data$Bat_Second_Wickets_Lost[i]<-10}
temp<-unlist(strsplit(All_IPL_Data$Bat_First_Overs[i],"/"))
All_IPL_Data$Bat_First_Overs_Consumed[i]<-temp[1]
All_IPL_Data$Bat_First_Overs_Allocated[i]<-temp[2]
temp<-unlist(strsplit(All_IPL_Data$Bat_Second_Overs[i],"/"))
All_IPL_Data$Bat_Second_Overs_Consumed[i]<-temp[1]
All_IPL_Data$Bat_Second_Overs_Allocated[i]<-temp[2]
i<-i+1
}
rm(i,temp)
##splitting Result column
i<-1
for (i in (1:nrow(All_IPL_Data)))
{
temp<-unlist(strsplit(trimws(All_IPL_Data$Result[i]),"\\won by|\\(with|\\remaining|\\)"))
All_IPL_Data$Winner[i]<-temp[1]
All_IPL_Data$Margin[i]<-temp[2]
i<-i+1
}
All_IPL_Data$Winner <- trimws(All_IPL_Data$Winner)
rm(i,temp)
##further splitting Margin column
i<-1
for (i in (1:nrow(All_IPL_Data)))
{
temp<-unlist(strsplit(trimws(All_IPL_Data$Margin[i]),"\\ |\\("))
All_IPL_Data$Winning_Margin[i]<-temp[1]
All_IPL_Data$Win_Type[i]<-temp[2]
All_IPL_Data$DL_Used[i]<-temp[4]
i<-i+1
}
All_IPL_Data$Win_Type<-gsub("s",replacement="",All_IPL_Data$Win_Type)
All_IPL_Data$DL_Used <- trimws(All_IPL_Data$DL_Used)
rm(i,temp)
##splitting Date column
temp<-as.data.frame(matrix(unlist(strsplit(trimws(All_IPL_Data$Date),"\\-|,")),ncol=3,byrow=TRUE))
All_IPL_Data$Date<-temp[,2]
All_IPL_Data$Year<-temp[,3]
All_IPL_Data$Year <- trimws(All_IPL_Data$Year)
rm(i,temp)
#remove the original columns after data is extracted
All_IPL_Data$Teams<-NULL
All_IPL_Data$Scores<-NULL
All_IPL_Data$Result<-NULL
All_IPL_Data$Bat_First_Score<-NULL
All_IPL_Data$Bat_Second_Score<-NULL
All_IPL_Data$Bat_First_Runs<-NULL
All_IPL_Data$Bat_First_Overs<-NULL
All_IPL_Data$Bat_Second_Runs<-NULL
All_IPL_Data$Bat_Second_Overs<-NULL
All_IPL_Data$Margin<-NULL
rm(temp,i)
##create winning team as Batting First or Chasing
i<-1
for (i in (1:nrow(All_IPL_Data)))
{
temp<-which(c(All_IPL_Data$Team_Batting_First[i],All_IPL_Data$Team_Batting_Second[i])==All_IPL_Data$Winner[i])
if (length(temp)==0){All_IPL_Data$Winning_Team[i]<-"Match Tied"}
if (length(temp)!=0 && temp==1) {All_IPL_Data$Winning_Team[i]<-"FirstBatting"}
if (length(temp)!=0 && temp==2) {All_IPL_Data$Winning_Team[i]<-"Chasing"}
i<-i+1
}
#Fix "Deccan Chargers" to "Sunrisers Hyderabad"
All_IPL_Data<-data.frame(lapply(All_IPL_Data, gsub, pattern="Deccan Chargers",replacement= "Sunrisers Hyderabad"))
#Change names of teams to cities
All_IPL_Data<-data.frame(lapply(All_IPL_Data, gsub, pattern="Chennai Super Kings",replacement= "Chennai"))
All_IPL_Data<-data.frame(lapply(All_IPL_Data, gsub, pattern="Delhi Daredevils",replacement= "Delhi"))
All_IPL_Data<-data.frame(lapply(All_IPL_Data, gsub, pattern="Kings XI Punjab",replacement= "Punjab"))
All_IPL_Data<-data.frame(lapply(All_IPL_Data, gsub, pattern="Kochi Tuskers Kerala",replacement= "Kochi"))
All_IPL_Data<-data.frame(lapply(All_IPL_Data, gsub, pattern="Kolkata Knight Riders",replacement= "Kolkata"))
All_IPL_Data<-data.frame(lapply(All_IPL_Data, gsub, pattern="Mumbai Indians",replacement= "Mumbai"))
All_IPL_Data<-data.frame(lapply(All_IPL_Data, gsub, pattern="Rajasthan Royals",replacement= "Rajasthan"))
All_IPL_Data<-data.frame(lapply(All_IPL_Data, gsub, pattern="Sunrisers Hyderabad",replacement= "Hyderabad"))
All_IPL_Data<-data.frame(lapply(All_IPL_Data, gsub, pattern="Pune Warriors",replacement= "Pune"))
All_IPL_Data<-data.frame(lapply(All_IPL_Data, gsub, pattern="Royal Challengers Bangalore",replacement= "Bangalore"))
##change all columns to character and remove white spaces
#All_IPL_Data<-data.frame(lapply(All_IPL_Data, as.character), stringsAsFactors=FALSE)
##i<-1;for (i in (1:ncol(All_IPL_Data))){All_IPL_Data[,i]<-trimws(All_IPL_Data[,i]);i<-i+1}
##change numeric columns to numeric
All_IPL_Data$BF_5_ov_score<-as.numeric(as.character(All_IPL_Data$BF_5_ov_score))
All_IPL_Data$BF_5_ov_wkts_lost<-as.numeric(as.character(All_IPL_Data$BF_5_ov_wkts_lost))
All_IPL_Data$BF_10_ov_score<-as.numeric(as.character(All_IPL_Data$BF_10_ov_score))
All_IPL_Data$BF_10_ov_wkts_lost<-as.numeric(as.character(All_IPL_Data$BF_10_ov_wkts_lost))
All_IPL_Data$BF_15_ov_score<-as.numeric(as.character(All_IPL_Data$BF_15_ov_score))
All_IPL_Data$BF_15_ov_wkts_lost<-as.numeric(as.character(All_IPL_Data$BF_15_ov_wkts_lost))
All_IPL_Data$BF_20_ov_score<-as.numeric(as.character(All_IPL_Data$BF_20_ov_score))
All_IPL_Data$BF_20_ov_wkts_lost<-as.numeric(as.character(All_IPL_Data$BF_20_ov_wkts_lost))
All_IPL_Data$BS_5_ov_score<-as.numeric(as.character(All_IPL_Data$BS_5_ov_score))
All_IPL_Data$BS_5_ov_wkts_lost<-as.numeric(as.character(All_IPL_Data$BS_5_ov_wkts_lost))
All_IPL_Data$BS_5_ov_Req_RR<-as.numeric(as.character(All_IPL_Data$BS_5_ov_Req_RR))
All_IPL_Data$BS_10_ov_score<-as.numeric(as.character(All_IPL_Data$BS_10_ov_score))
All_IPL_Data$BS_10_ov_wkts_lost<-as.numeric(as.character(All_IPL_Data$BS_10_ov_wkts_lost))
All_IPL_Data$BS_10_ov_Req_RR<-as.numeric(as.character(All_IPL_Data$BS_10_ov_Req_RR))
All_IPL_Data$BS_15_ov_score<-as.numeric(as.character(All_IPL_Data$BS_15_ov_score))
All_IPL_Data$BS_15_ov_wkts_lost<-as.numeric(as.character(All_IPL_Data$BS_15_ov_wkts_lost))
All_IPL_Data$BS_15_ov_Req_RR<-as.numeric(as.character(All_IPL_Data$BS_15_ov_Req_RR))
All_IPL_Data$BS_20_ov_score<-as.numeric(as.character(All_IPL_Data$BS_20_ov_score))
All_IPL_Data$BS_20_ov_wkts_lost<-as.numeric(as.character(All_IPL_Data$BS_20_ov_wkts_lost))
All_IPL_Data$Bat_First_Runs_Scored<-as.numeric(as.character(All_IPL_Data$Bat_First_Runs_Scored))
All_IPL_Data$Bat_First_Wickets_Lost<-as.numeric(as.character(All_IPL_Data$Bat_First_Wickets_Lost))
All_IPL_Data$Bat_Second_Runs_Scored<-as.numeric(as.character(All_IPL_Data$Bat_Second_Runs_Scored))
All_IPL_Data$Bat_Second_Wickets_Lost<-as.numeric(as.character(All_IPL_Data$Bat_Second_Wickets_Lost))
All_IPL_Data$Bat_First_Overs_Consumed<-as.numeric(as.character(All_IPL_Data$Bat_First_Overs_Consumed))
All_IPL_Data$Bat_Second_Overs_Consumed<-as.numeric(as.character(All_IPL_Data$Bat_Second_Overs_Consumed))
All_IPL_Data$Bat_First_Overs_Allocated<-as.numeric(as.character(All_IPL_Data$Bat_First_Overs_Allocated))
All_IPL_Data$Bat_Second_Overs_Allocated<-as.numeric(as.character(All_IPL_Data$Bat_Second_Overs_Allocated))
All_IPL_Data$Winning_Margin<-as.numeric(as.character(All_IPL_Data$Winning_Margin))
#create Match_Number column
All_IPL_Data$Match_Number<-as.numeric(rownames(All_IPL_Data))
#fill out BF_20_ov_score and BF_20_ov_wkts_lost for incomplete innings
All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_20_ov_score)),]$BF_20_ov_score<-All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_20_ov_score)),]$Bat_First_Runs_Scored
All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_20_ov_wkts_lost)),]$BF_20_ov_wkts_lost<-All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_20_ov_wkts_lost)),]$Bat_First_Wickets_Lost
All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_15_ov_score)),]$BF_15_ov_score<-All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_15_ov_score)),]$Bat_First_Runs_Scored
All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_15_ov_wkts_lost)),]$BF_15_ov_wkts_lost<-All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_15_ov_wkts_lost)),]$Bat_First_Wickets_Lost
All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_10_ov_score)),]$BF_10_ov_score<-All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_10_ov_score)),]$Bat_First_Runs_Scored
All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_10_ov_wkts_lost)),]$BF_10_ov_wkts_lost<-All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_10_ov_wkts_lost)),]$Bat_First_Wickets_Lost
All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_5_ov_score)),]$BF_5_ov_score<-All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_5_ov_score)),]$Bat_First_Runs_Scored
All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_5_ov_wkts_lost)),]$BF_5_ov_wkts_lost<-All_IPL_Data[(All_IPL_Data$Bat_First_Overs_Allocated==20)&(is.na(All_IPL_Data$BF_5_ov_wkts_lost)),]$Bat_First_Wickets_Lost
#create run rate column
i<-1
for (i in (1:nrow(All_IPL_Data)))
{
balls_faced<-floor(All_IPL_Data$Bat_First_Overs_Consumed[i])*6 + (All_IPL_Data$Bat_First_Overs_Consumed[i]-floor(All_IPL_Data$Bat_First_Overs_Consumed[i]))*10
All_IPL_Data$Bat_First_Run_Rate[i] <- All_IPL_Data$Bat_First_Runs_Scored[i]/balls_faced*6
balls_faced<-floor(All_IPL_Data$Bat_Second_Overs_Consumed[i])*6 + (All_IPL_Data$Bat_Second_Overs_Consumed[i]-floor(All_IPL_Data$Bat_Second_Overs_Consumed[i]))*10
All_IPL_Data$Bat_Second_Run_Rate[i] <- All_IPL_Data$Bat_Second_Runs_Scored[i]/balls_faced*6
i<-i+1
}
#create Balls Remaining column
i<-1
for (i in (1:nrow(All_IPL_Data)))
{
balls_faced<-floor(All_IPL_Data$Bat_Second_Overs_Consumed[i])*6 + (All_IPL_Data$Bat_Second_Overs_Consumed[i]-floor(All_IPL_Data$Bat_Second_Overs_Consumed[i]))*10
balls_allocated<-floor(All_IPL_Data$Bat_Second_Overs_Allocated[i])*6 + (All_IPL_Data$Bat_Second_Overs_Allocated[i]-floor(All_IPL_Data$Bat_Second_Overs_Allocated[i]))*10
All_IPL_Data$Balls_Remaining[i] <- balls_allocated - balls_faced
i<-i+1
}
rm(balls_allocated,balls_faced)
# label the close matches
i<-1
All_IPL_Data$Close_Match <- "NO"
All_IPL_Data[All_IPL_Data$Winning_Team=="Match Tied",'Close_Match']<-"YES" ##all Tied Matches are Close
for (i in (1:nrow(All_IPL_Data)))
{
if (is.na(All_IPL_Data$Win_Type[i])) {}
else if (All_IPL_Data$Win_Type[i]=="run"&All_IPL_Data$Winning_Margin[i]<=close_runs) {All_IPL_Data$Close_Match[i] <- "YES"}
else if ((All_IPL_Data$Win_Type[i]=="wicket"&All_IPL_Data$Winning_Margin[i]<=close_wickets)||(All_IPL_Data$Win_Type[i]=="wicket"&All_IPL_Data$Balls_Remaining[i]<=close_balls)) {All_IPL_Data$Close_Match[i] <- "YES"}
i <- i+1
}
All_IPL_Data[,'Close_Match']<-as.factor(All_IPL_Data[,'Close_Match'])
# label morning and evening matches - if 2 matches in a day then first one afternoon and next one evening match
i<-2
All_IPL_Data$Match_Time <- "Evening"
for (i in (2:nrow(All_IPL_Data)))
{
if (All_IPL_Data$Date[i] == All_IPL_Data$Date[i-1]) {All_IPL_Data$Match_Time[i-1] <- "Afternoon"}
i <- i+1
}
All_IPL_Data[,'Match_Time']<-as.factor(All_IPL_Data[,'Match_Time'])
#write.xlsx(All_IPL_Data,"C:/Abhijay/Analytics use cases/MOOC/Practice datasets and code/Input/All_IPL_Data.xlsx")
#setwd("C:/Abhijay/Analytics use cases/MOOC/Practice datasets and code/Input")
#write.csv(All_IPL_Data,"All_IPL_Data.csv")
rm(Bangalore,Chennai,Delhi,Hyderabad,Kochi,Kolkata,Mumbai,Pune,Punjab,Rajasthan)
IPL_Teams<-as.character(unique(All_IPL_Data$Team1))
All_Teams<-vector("list",length(IPL_Teams))
names(All_Teams)<-IPL_Teams
Run_Rates<-vector("list",length(IPL_Teams))
names(Run_Rates)<-IPL_Teams
i<-1
for (i in (1:length(IPL_Teams)))
{
assign(IPL_Teams[i],All_IPL_Data[All_IPL_Data$Team1 == IPL_Teams[i]|All_IPL_Data$Team2 == IPL_Teams[i],])
temp<-get(IPL_Teams[i])
temp$Match_Number<-seq(1:nrow(temp))
j<-1
temp$Won<- "Lost"
temp$Playing_At<- "Not_Home"
for (j in (1:nrow(temp)))
{
if ((temp$Winner[j] == IPL_Teams[i])&(temp$Team_Batting_First[j] == IPL_Teams[i])) {temp$Won[j] <- "FirstBatting"}
else if ((temp$Winner[j] == IPL_Teams[i])&(temp$Team_Batting_Second[j] == IPL_Teams[i])) {temp$Won[j] <- "SecondBatting"}
else if (temp$Winning_Team[j] == "Match Tied") {temp$Won[j] <- "Tied"}
if (temp$Team_Batting_First[j] == IPL_Teams[i])
{
temp$Batted[j] <- "First"
temp$Runs_Scored[j] <- temp$Bat_First_Runs_Scored[j]
temp$Run_Rate[j] <- temp$Bat_First_Run_Rate[j]
temp$Run_Rate_Conceded[j] <- temp$Bat_Second_Run_Rate[j]
}
else if (temp$Team_Batting_Second[j] == IPL_Teams[i])
{
temp$Batted[j] <- "Second"
temp$Runs_Scored[j] <- temp$Bat_Second_Runs_Scored[j]
temp$Run_Rate[j] <- temp$Bat_Second_Run_Rate[j]
temp$Run_Rate_Conceded[j] <- temp$Bat_First_Run_Rate[j]
}
if (IPL_Teams[i]=="Bangalore") {if (temp$Venue[j] == "Bangalore") {temp$Playing_At[j]<-"Home"}}
else if (IPL_Teams[i]=="Chennai")   {if (temp$Venue[j] == "Chennai") {temp$Playing_At[j]<-"Home"}}
else if (IPL_Teams[i]=="Delhi")     {if (temp$Venue[j] == "Delhi") {temp$Playing_At[j]<-"Home"}}
else if (IPL_Teams[i]=="Hyderabad") {if ((temp$Venue[j] == "Hyderabad (Deccan)")|(temp$Venue[j] == "Visakhapatnam")) {temp$Playing_At[j]<-"Home"}}
else if (IPL_Teams[i]=="Kochi")     {if (temp$Venue[j] == "Kochi") {temp$Playing_At[j]<-"Home"}}
else if (IPL_Teams[i]=="Kolkata")   {if (temp$Venue[j] == "Kolkata") {temp$Playing_At[j]<-"Home"}}
else if (IPL_Teams[i]=="Mumbai")    {if ((temp$Venue[j] == "Mumbai")|(temp$Venue[j] == "Mumbai (BS)")) {temp$Playing_At[j]<-"Home"}}
else if (IPL_Teams[i]=="Pune")      {if (temp$Venue[j] == "Pune") {temp$Playing_At[j]<-"Pune"}}
else if (IPL_Teams[i]=="Punjab")    {if (temp$Venue[j] == "Punjab") {temp$Playing_At[j]<-"Mohali"}}
else if (IPL_Teams[i]=="Rajasthan") {if (temp$Venue[j] == "Rajasthan") {temp$Playing_At[j]<-"Jaipur"}}
j<-j+1
}
assign(IPL_Teams[i],temp)
All_Teams[[i]]<-get(IPL_Teams[i])
i<-i+1
}
rm(temp)
#create Summary Table
Summary_Table<-data.frame(Team=c("Bangalore","Punjab","Delhi","Kolkata","Mumbai","Rajasthan","Hyderabad","Chennai","Kochi","Pune"))
i<-1
for (i in (1:nrow(Summary_Table)))
{
Summary_Table$Total_Matches[i]<-nrow(All_IPL_Data[All_IPL_Data$Team1 == Summary_Table$Team[i]|All_IPL_Data$Team2 == Summary_Table$Team[i],])
Summary_Table$Wins[i]<-nrow(All_IPL_Data[(All_IPL_Data$Team1 == Summary_Table$Team[i]|All_IPL_Data$Team2 == Summary_Table$Team[i])&(as.character(All_IPL_Data$Winner) == as.character(Summary_Table$Team[i])),])
Summary_Table$Tied[i]<-nrow(All_IPL_Data[(All_IPL_Data$Team1 == Summary_Table$Team[i]|All_IPL_Data$Team2 == Summary_Table$Team[i])&(All_IPL_Data$Winning_Team == "Match Tied"),])
Summary_Table$Lost[i]<- Summary_Table$Total_Matches[i]-Summary_Table$Wins[i]-Summary_Table$Tied[i]
Summary_Table$Win_Percent[i] <- (Summary_Table$Wins[i]/Summary_Table$Total_Matches[i])*100
Summary_Table$Batted_First[i]<-nrow(All_IPL_Data[(All_IPL_Data$Team1 == Summary_Table$Team[i]|All_IPL_Data$Team2 == Summary_Table$Team[i])&(All_IPL_Data$Team_Batting_First == Summary_Table$Team[i]),])
Summary_Table$Won_Batting_First[i]<-nrow(All_IPL_Data[(All_IPL_Data$Team1 == Summary_Table$Team[i]|All_IPL_Data$Team2 == Summary_Table$Team[i])&(All_IPL_Data$Team_Batting_First == Summary_Table$Team[i])&(as.character(All_IPL_Data$Winner) == as.character(Summary_Table$Team[i])),])
Summary_Table$Bat_First_Win_Percent[i]<-(Summary_Table$Won_Batting_First[i]/Summary_Table$Batted_First[i])*100
Summary_Table$Dismissed_Batting_First[i] <- nrow(All_IPL_Data[(All_IPL_Data$Team_Batting_First==Summary_Table$Team[i])&(All_IPL_Data$Bat_First_Wickets_Lost==10),])
Summary_Table$Chased[i]<-nrow(All_IPL_Data[(All_IPL_Data$Team1 == Summary_Table$Team[i]|All_IPL_Data$Team2 == Summary_Table$Team[i])&(All_IPL_Data$Team_Batting_Second == Summary_Table$Team[i]),])
Summary_Table$Won_Chasing[i]<-nrow(All_IPL_Data[(All_IPL_Data$Team1 == Summary_Table$Team[i]|All_IPL_Data$Team2 == Summary_Table$Team[i])&(All_IPL_Data$Team_Batting_Second == Summary_Table$Team[i])&(as.character(All_IPL_Data$Winner) == as.character(Summary_Table$Team[i])),])
Summary_Table$Chase_Win_Percent[i] <- (Summary_Table$Won_Chasing[i]/Summary_Table$Chased[i])*100
Summary_Table$Dismissed_Batting_Second[i] <-nrow(All_IPL_Data[(All_IPL_Data$Team_Batting_Second==Summary_Table$Team[i])&(All_IPL_Data$Bat_Second_Wickets_Lost==10),])
Summary_Table$Close_Matches_Won[i] <- nrow(All_IPL_Data[(All_IPL_Data$Team1 == Summary_Table$Team[i]|All_IPL_Data$Team2 == Summary_Table$Team[i])&(All_IPL_Data$Close_Match == "YES")&(as.character(All_IPL_Data$Winner) == as.character(Summary_Table$Team[i])),])
Summary_Table$Close_Matches_Lost[i] <- nrow(All_IPL_Data[(All_IPL_Data$Team1 == Summary_Table$Team[i]|All_IPL_Data$Team2 == Summary_Table$Team[i])&(All_IPL_Data$Close_Match == "YES")&(as.character(All_IPL_Data$Winner) != as.character(Summary_Table$Team[i])&(as.character(All_IPL_Data$Winning_Team) != "Match Tied")),])
Summary_Table$Close_Matches_Tied[i] <- nrow(All_IPL_Data[(All_IPL_Data$Team1 == Summary_Table$Team[i]|All_IPL_Data$Team2 == Summary_Table$Team[i])&(All_IPL_Data$Close_Match == "YES")&(as.character(All_IPL_Data$Winning_Team) == "Match Tied"),])
i <- i+1
}
rm(i,j,IPL_Teams)
Playoffs<-read.xlsx("C:/Abhijay/Analytics use cases/MOOC/Practice datasets and code/Input/Playoffs.xlsx")
names(All_IPL_Data)
ddply(All_IPL_Date,"Year",summarise,length(Winning_Team))
ddply(All_IPL_Data,"Year",summarise,length(Winning_Team))
ddply(All_IPL_Data,"Year",summarise,length(Winning_Team=="FirstBatting"))
View(All_IPL_Data)
ddply(All_IPL_Data,"Year",summarise,length(All_IPL_Data$Winning_Team=="FirstBatting"))
ddply(All_IPL_Data[All_IPL_Data$Winning_Team=="FirstBatting",],"Year",summarise,length(Winning_Team))
ddply(All_IPL_Data,c("Year","Winning_Team"),summarise,length(Winning_Team))
ddply(All_IPL_Data,c("Year","Winning_Team"),summarise,N=length(Winning_Team))
ddply(All_IPL_Data,c("Year"),summarise,N=length(Winning_Team))
ddply(All_IPL_Data[All_IPL_Data$Winning_Team="FirstBatting"],c("Year"),summarise,N=length(Winning_Team))
ddply(All_IPL_Data[All_IPL_Data$Winning_Team=="FirstBatting"],c("Year"),summarise,N=length(Winning_Team))
ddply(All_IPL_Data[All_IPL_Data$Winning_Team=="FirstBatting",],c("Year"),summarise,N=length(Winning_Team))
ddply(All_IPL_Data[All_IPL_Data$Winning_Team=="Chasing",],c("Year"),summarise,N=length(Winning_Team))
ddply(All_IPL_Data,c("Venue"),summarise,N=length(Winning_Team))
order(ddply(All_IPL_Data,c("Venue"),summarise,N=length(Winning_Team)),2)
order(ddply(All_IPL_Data,c("Venue"),summarise,N=length(Winning_Team)))
ddply(All_IPL_Data,c("Venue"),summarise,N=length(Winning_Team))[order(ddply(All_IPL_Data,c("Venue"),summarise,N=length(Winning_Team)))]
ddply(All_IPL_Data,c("Venue"),summarise,N=length(Winning_Team))[order(ddply(All_IPL_Data,c("Venue"),summarise,N=length(Winning_Team))),]
ddply(All_IPL_Data,c("Venue"),summarise,N=length(Winning_Team))[order(ddply(All_IPL_Data,c("Venue"),summarise,N=length(Winning_Team)))]
order(ddply(All_IPL_Data,c("Venue"),summarise,N=length(Winning_Team)))
t<-ddply(All_IPL_Data,c("Venue"),summarise,N=length(Winning_Team))
t
order(t,N)
order(t,t$N)
order(t)
?order
sort.list(t)
sort.list(t$N)
t[sort.list(t$N),]
rm(t)
ddply(All_IPL_Data[All_IPL_Data$Venue=="Mumbai"],"Year",summarise,N=length(Venue))
ddply(All_IPL_Data[All_IPL_Data$Venue=="Mumbai",],"Year",summarise,N=length(Venue))
ddply(All_IPL_Data[All_IPL_Data$Venue=="Ranchi",],"Year",summarise,N=length(Venue))
ddply(All_IPL_Data[All_IPL_Data$Venue=="Kolkata",],"Year",summarise,N=length(Venue))
View(Playoffs)
names(All_IPL_Data)
which(max(All_IPL_Data$Bat_First_Run_Rate))
?which
which.max(All_IPL_Data$Bat_First_Run_Rate)
All_IPL_Data[391,]
All_IPL_Data[391,'Match_Number']
All_IPL_Data[391,c('Match_Number','Team_Batting_First','Bat_First_Runs_Scored','Bat_First_Overs_Consumed')]
which.max(All_IPL_Data[All_IPL_Data$Bat_First_Overs_Allocated==20,]$Bat_First_Run_Rate)
All_IPL_Data[344,c('Match_Number','Team_Batting_First','Bat_First_Runs_Scored','Bat_First_Overs_Consumed')]
which.max(All_IPL_Data[All_IPL_Data$Bat_First_Overs_Allocated==20,]$Bat_First_Run_Rate)
All_IPL_Data[All_IPL_Data$Bat_First_Overs_Allocated==20,]
All_IPL_Data[All_IPL_Data$Bat_First_Overs_Allocated==20,][344,]
All_IPL_Data[All_IPL_Data$Bat_First_Overs_Allocated==20,][344,,c('Match_Number','Team_Batting_First','Bat_First_Runs_Scored','Bat_First_Overs_Consumed')]
All_IPL_Data[All_IPL_Data$Bat_First_Overs_Allocated==20,][344,c('Match_Number','Team_Batting_First','Bat_First_Runs_Scored','Bat_First_Overs_Consumed')]
i<-1
All_IPL_Data$Close_Match <- "NO"
All_IPL_Data[All_IPL_Data$Winning_Team=="Match Tied",'Close_Match']<-"YES" ##all Tied Matches are Close
for (i in (1:nrow(All_IPL_Data)))
{
if (is.na(All_IPL_Data$Win_Type[i])) {}
else if (All_IPL_Data$Win_Type[i]=="run"&All_IPL_Data$Winning_Margin[i]<=close_runs) {All_IPL_Data$Close_Match[i] <- "YES"}
else if ((All_IPL_Data$Win_Type[i]=="wicket"&All_IPL_Data$Winning_Margin[i]<=close_wickets)||(All_IPL_Data$Win_Type[i]=="wicket"&All_IPL_Data$Balls_Remaining[i]<=close_balls&All_IPL_Data$Winning_Margin[i]<=2)) {All_IPL_Data$Close_Match[i] <- "YES"}
i <- i+1
}
All_IPL_Data[,'Close_Match']<-as.factor(All_IPL_Data[,'Close_Match'])
ddply(All_IPL_Data,c("Year","Close_Match"),summarise,length(Close_Match))
i<-1
All_IPL_Data$Close_Match <- "NO"
All_IPL_Data[All_IPL_Data$Winning_Team=="Match Tied",'Close_Match']<-"YES" ##all Tied Matches are Close
for (i in (1:nrow(All_IPL_Data)))
{
if (is.na(All_IPL_Data$Win_Type[i])) {}
else if (All_IPL_Data$Win_Type[i]=="run"&All_IPL_Data$Winning_Margin[i]<=close_runs) {All_IPL_Data$Close_Match[i] <- "YES"}
else if ((All_IPL_Data$Win_Type[i]=="wicket"&All_IPL_Data$Winning_Margin[i]<=close_wickets)||(All_IPL_Data$Win_Type[i]=="wicket"&All_IPL_Data$Balls_Remaining[i]<=close_balls)) {All_IPL_Data$Close_Match[i] <- "YES"}
i <- i+1
}
All_IPL_Data[,'Close_Match']<-as.factor(All_IPL_Data[,'Close_Match'])
ddply(All_IPL_Data,c("Year","Close_Match"),summarise,length(Close_Match))
ddply(All_IPL_Data,c("Year","Close_Match","Winning_Team"),summarise,length(Close_Match))
ddply(All_IPL_Data,c("Year","Close_Match"),summarise,length(Close_Match))
View(Chennai)
View(Summary_Table)
names(All_IPL_Data)
cor(All_IPL_Data$BF_15_ov_wkts_lost,(All_IPL_Data$BF_20_ov_score-All_IPL_Data$BF_15_ov_score),na.rm=TRUE)
cor(All_IPL_Data$BF_15_ov_wkts_lost,(All_IPL_Data$BF_20_ov_score-All_IPL_Data$BF_15_ov_score))
?cor()
t<-(All_IPL_Data$BF_20_ov_score-All_IPL_Data$BF_15_ov_score)
t
All_IPL_Data$BF_15_ov_wkts_lost
cor(All_IPL_Data$BF_15_ov_wkts_lost,t,use="complete.obs")
cor(All_IPL_Data$BF_15_ov_wkts_lost,t,use="everything")
cor(All_IPL_Data$BF_15_ov_wkts_lost,t,use="pairwise.complete.obs")
glm(BF_20_ov_score~BF_5_ov_score+BF_5_ov_wkts_lost+BF_10_ov_score+BF_10_ov_wkts_lost,data=All_IPL_Data)
lm(BF_20_ov_score~BF_5_ov_score+BF_5_ov_wkts_lost+BF_10_ov_score+BF_10_ov_wkts_lost,data=All_IPL_Data)
glm(BF_20_ov_score~BF_5_ov_score+BF_5_ov_wkts_lost+BF_10_ov_score+BF_10_ov_wkts_lost,data=All_IPL_Data)
fit_l<-glm(BF_20_ov_score~BF_5_ov_score+BF_5_ov_wkts_lost+BF_10_ov_score+BF_10_ov_wkts_lost,data=All_IPL_Data)
names(fit_l)
fit_l$R
fit_l$effects
names(fit_l)
fit_l$aic
fit_l$qr
names(fit_l)
fit_l$na.action
fit_l$weights
names(fit_l)
fit_l$iter
fit_l$family
fit_l$null.deviance
fit_l$deviance
fit_l$aic
fit_rf<-randomForest(BF_20_ov_score~BF_5_ov_score+BF_5_ov_wkts_lost+BF_10_ov_score+BF_10_ov_wkts_lost,data=All_IPL_Data,na.action=na.omit)
names(fit_rf)
fit_rf$importance
fit_rf$importanceSD
fit_rf$ccoefs
fit_rf$coefs
temp=All_IPL_Data[(All_IPL_Data$BS_15_ov_Req_RR<7 & All_IPL_Data$BS_15_ov_wkts_lost<=4 & All_IPL_Data$Winning_Team=="FirstBatting"),]
View(temp)
temp=All_IPL_Data[(All_IPL_Data$BF_20_ov_score-All_IPL_Data$BF_15_ov_score)<25&(All_IPL_Data$BF_15_ov_wkts_lost<=2)&(All_IPL_Data$BF_20_ov_wkts_lost-All_IPL_Data$BF_15_ov_wkts_lost<=5),]
View(temp)
