Trading_Entries <- read.xlsx("C:/Abhijay/Analytics use cases/Stock Returns/Input Folder/Share Transactions from 2005.xlsx")
Live_Share_Prices <- read.xlsx("C:/Abhijay/Analytics use cases/Stock Returns/Input Folder/Live Share Prices.xlsx")
Live_Share_Prices$SC_ID<-NA
Live_Share_Prices$Current_NSE_Price<-NA
Live_Share_Prices$Current_NSE_Volumes<-NA
Live_Share_Prices$Current_BSE_Price<-NA
Live_Share_Prices$Current_BSE_Volumes<-NA
Live_Share_Prices$Current.Price<-NA
Live_Share_Prices$NSE_1_yr_back<-NA
Live_Share_Prices$NSE_2_yr_back<-NA
Live_Share_Prices$NSE_3_yr_back<-NA
Live_Share_Prices$BSE_1_yr_back<-NA
Live_Share_Prices$BSE_2_yr_back<-NA
Live_Share_Prices$BSE_3_yr_back<-NA
Live_Share_Prices$Price_1_yr_back<-NA
Live_Share_Prices$Price_2_yr_back<-NA
Live_Share_Prices$Price_3_yr_back<-NA
Live_Share_Prices$CAGR_1_yr<-NA
Live_Share_Prices$CAGR_2_yr<-NA
Live_Share_Prices$CAGR_3_yr<-NA
temp<-lapply(Live_Share_Prices[Live_Share_Prices$Type=="Equity",'Link'],function(i) html(i))
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Current_NSE_Price<- unlist(lapply(temp,function(i) ifelse(length(i%>%html_nodes("span#Nse_Prc_tick strong"))>0,as.numeric(gsub(",","",i%>%html_nodes("span#Nse_Prc_tick strong")%>%.[[1]]%>%xmlValue())),NA)))
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Current_NSE_Volumes<- unlist(lapply(temp,function(i) ifelse(length(i%>%html_nodes("span#nse_volume"))>0,as.numeric(gsub(",","",i%>%html_nodes("span#nse_volume")%>%.[[1]]%>%xmlValue())),NA)))
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Current_BSE_Price<- unlist(lapply(temp,function(i) ifelse(length(i%>%html_nodes("span#Bse_Prc_tick"))>0,as.numeric(gsub(",","",i%>%html_nodes("span#Bse_Prc_tick")%>%.[[1]]%>%xmlValue())),NA)))
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Current_BSE_Volumes<- unlist(lapply(temp,function(i) ifelse(length(i%>%html_nodes("span#bse_volume"))>0,as.numeric(gsub(",","",i%>%html_nodes("span#bse_volume")%>%.[[1]]%>%xmlValue())),NA)))
Live_Share_Prices[Live_Share_Prices$Type=="Equity",'SC_ID']<-unlist(lapply(temp,function(i) i%>%html_nodes("div.chartCont2#tabs3 input")%>%html_attr("value")%>%.[[2]]))
temp<-lapply(Live_Share_Prices[Live_Share_Prices$Type=="Mutual Fund",'Link'],function(i) html(i))
Live_Share_Prices[Live_Share_Prices$Type=="Mutual Fund",]$Current_NSE_Price<- unlist(lapply(temp,function(i) ifelse(length(i%>%html_nodes("span.bd30tp"))>0,as.numeric(gsub(",","",i%>%html_nodes("span.bd30tp")%>%.[[1]]%>%xmlValue())),NA)))
Live_Share_Prices[Live_Share_Prices$Type=="Mutual Fund",]$CAGR_1_yr<-as.numeric(unlist(lapply(temp,function(i) i%>%html_nodes("td.rgt span")%>%.[[4]]%>%xmlValue())))
Live_Share_Prices[Live_Share_Prices$Type=="Mutual Fund",]$CAGR_2_yr<-as.numeric(unlist(lapply(temp,function(i) i%>%html_nodes("td.rgt span")%>%.[[5]]%>%xmlValue())))
Live_Share_Prices[Live_Share_Prices$Type=="Mutual Fund",]$CAGR_3_yr<-as.numeric(unlist(lapply(temp,function(i) i%>%html_nodes("td.rgt span")%>%.[[6]]%>%xmlValue())))
Live_Share_Prices$Current.Price<- ifelse(!is.na(Live_Share_Prices$Current_NSE_Price),Live_Share_Prices$Current_NSE_Price,Live_Share_Prices$Current_BSE_Price)
Live_Share_Prices$Traded.Volumes<- ifelse(!is.na(Live_Share_Prices$Current_NSE_Volumes),Live_Share_Prices$Current_NSE_Volumes,Live_Share_Prices$Current_BSE_Volumes)
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$NSE_1_yr_back<-unlist(lapply(Live_Share_Prices[Live_Share_Prices$Type=="Equity",'SC_ID'],function(i) as.numeric(html(paste("http://www.moneycontrol.com/stocks/company_info/get_histprices.php?ex=N&sc_id=",i,"&range=0&sel_date=",gsub("-","",(Sys.Date()-365*1)),"&curr_open=0.00&curr_high=0.00&curr_low=0.00&curr_close=0.00&curr_vol=0",sep=""))%>%html_nodes("td.th03")%>%.[[10]]%>%xmlValue())))
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$NSE_2_yr_back<-unlist(lapply(Live_Share_Prices[Live_Share_Prices$Type=="Equity",'SC_ID'],function(i) as.numeric(html(paste("http://www.moneycontrol.com/stocks/company_info/get_histprices.php?ex=N&sc_id=",i,"&range=0&sel_date=",gsub("-","",(Sys.Date()-365*2)),"&curr_open=0.00&curr_high=0.00&curr_low=0.00&curr_close=0.00&curr_vol=0",sep=""))%>%html_nodes("td.th03")%>%.[[10]]%>%xmlValue())))
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$NSE_3_yr_back<-unlist(lapply(Live_Share_Prices[Live_Share_Prices$Type=="Equity",'SC_ID'],function(i) as.numeric(html(paste("http://www.moneycontrol.com/stocks/company_info/get_histprices.php?ex=N&sc_id=",i,"&range=0&sel_date=",gsub("-","",(Sys.Date()-365*3)),"&curr_open=0.00&curr_high=0.00&curr_low=0.00&curr_close=0.00&curr_vol=0",sep=""))%>%html_nodes("td.th03")%>%.[[10]]%>%xmlValue())))
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$BSE_1_yr_back<-unlist(lapply(Live_Share_Prices[Live_Share_Prices$Type=="Equity",'SC_ID'],function(i) as.numeric(html(paste("http://www.moneycontrol.com/stocks/company_info/get_histprices.php?ex=B&sc_id=",i,"&range=0&sel_date=",gsub("-","",(Sys.Date()-365*1)),"&curr_open=0.00&curr_high=0.00&curr_low=0.00&curr_close=0.00&curr_vol=0",sep=""))%>%html_nodes("td.th03")%>%.[[10]]%>%xmlValue())))
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$BSE_2_yr_back<-unlist(lapply(Live_Share_Prices[Live_Share_Prices$Type=="Equity",'SC_ID'],function(i) as.numeric(html(paste("http://www.moneycontrol.com/stocks/company_info/get_histprices.php?ex=B&sc_id=",i,"&range=0&sel_date=",gsub("-","",(Sys.Date()-365*2)),"&curr_open=0.00&curr_high=0.00&curr_low=0.00&curr_close=0.00&curr_vol=0",sep=""))%>%html_nodes("td.th03")%>%.[[10]]%>%xmlValue())))
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$BSE_3_yr_back<-unlist(lapply(Live_Share_Prices[Live_Share_Prices$Type=="Equity",'SC_ID'],function(i) as.numeric(html(paste("http://www.moneycontrol.com/stocks/company_info/get_histprices.php?ex=B&sc_id=",i,"&range=0&sel_date=",gsub("-","",(Sys.Date()-365*3)),"&curr_open=0.00&curr_high=0.00&curr_low=0.00&curr_close=0.00&curr_vol=0",sep=""))%>%html_nodes("td.th03")%>%.[[10]]%>%xmlValue())))
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Price_1_yr_back<- ifelse(!is.na(Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$NSE_1_yr_back),Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$NSE_1_yr_back,Live_Share_Prices$BSE_1_yr_back)
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Price_2_yr_back <- ifelse(!is.na(Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$NSE_2_yr_back),Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$NSE_2_yr_back,Live_Share_Prices$BSE_1_yr_back)
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Price_3_yr_back <- ifelse(!is.na(Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$NSE_3_yr_back),Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$NSE_3_yr_back,Live_Share_Prices$BSE_1_yr_back)
Live_Share_Prices[Live_Share_Prices$Type=="Equity",][is.na(Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Price_1_yr_back),'Price_1_yr_back']<-Live_Share_Prices[Live_Share_Prices$Type=="Equity",][is.na(Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Price_1_yr_back),'Current.Price']
Live_Share_Prices[Live_Share_Prices$Type=="Equity",][is.na(Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Price_2_yr_back),'Price_2_yr_back']<-Live_Share_Prices[Live_Share_Prices$Type=="Equity",][is.na(Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Price_2_yr_back),'Current.Price']
Live_Share_Prices[Live_Share_Prices$Type=="Equity",][is.na(Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Price_3_yr_back),'Price_3_yr_back']<-Live_Share_Prices[Live_Share_Prices$Type=="Equity",][is.na(Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Price_3_yr_back),'Current.Price']
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$CAGR_1_yr<-round(100*((Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Current.Price/Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Price_1_yr_back)-1),2)
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$CAGR_2_yr<-round(100*((Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Current.Price/Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Price_2_yr_back)^(1/2)-1),2)
Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$CAGR_3_yr<-round(100*((Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Current.Price/Live_Share_Prices[Live_Share_Prices$Type=="Equity",]$Price_3_yr_back)^(1/3)-1),2)
View(Live_Share_Prices)
Live_Share_Prices$CAGR_1_yr[is.na(Live_Share_Prices$CAGR_1_yr)]<-0
Live_Share_Prices$CAGR_2_yr[is.na(Live_Share_Prices$CAGR_2_yr)]<-0
Live_Share_Prices$CAGR_3_yr[is.na(Live_Share_Prices$CAGR_3_yr)]<-0
View(Live_Share_Prices)
Trading_Entries[,1]<-as.Date(Trading_Entries[,1],origin="1899-12-30")
#keep only relevant columns
Trading_Entries$TOTAL<-Trading_Entries$Trade.Value+Trading_Entries$Brokerage.incl..taxes
Trading_Entries<-Trading_Entries[,c(1:6,16:17)]
#compute the unit price of the Share (incl. Brokerage and tax)
Trading_Entries$Unit_Price<-Trading_Entries$TOTAL/Trading_Entries$Qty
#create 2 datasets - one for Buy txns and one for Sell Txns
Buy_Trading_Entries<-data.frame(Trading_Entries[Trading_Entries$Action=="Buy",],row.names=NULL)
names(Buy_Trading_Entries)[names(Buy_Trading_Entries)=="Date"] <- "Buy_Date"
names(Buy_Trading_Entries)[names(Buy_Trading_Entries)=="Unit_Price"] <- "Buy_Price"
Buy_Trading_Entries<-Buy_Trading_Entries[,c(1:2,4,9)]
Buy_Trading_Entries<-Buy_Trading_Entries[order(Buy_Trading_Entries$Stock,Buy_Trading_Entries$Buy_Date),]
Sell_Trading_Entries<-data.frame(Trading_Entries[Trading_Entries$Action=="Sell",],row.names=NULL)
names(Sell_Trading_Entries)[names(Sell_Trading_Entries)=="Date"] <- "Sell_Date"
names(Sell_Trading_Entries)[names(Sell_Trading_Entries)=="Unit_Price"] <- "Sell_Price"
Sell_Trading_Entries<-Sell_Trading_Entries[,c(1:2,4,9)]
Sell_Trading_Entries<-Sell_Trading_Entries[order(Sell_Trading_Entries$Stock,Sell_Trading_Entries$Sell_Date),]
#expand the Buy dataset to have 1 share txn per row
Buy_Journal<-data.frame(Buy_Date=character(),Stock=character(0), Qty=numeric(0),Buy_Price=numeric(0),row.names=NULL)
Sell_Journal<-data.frame(Sell_Date=character(),Stock=character(0), Qty=numeric(0),Sell_Price=numeric(0),row.names=NULL)
#Buy
i <- 1
for (i in 1:nrow(Buy_Trading_Entries))
{
if(identical(Buy_Trading_Entries$Stock[i],Buy_Trading_Entries$Stock[(i-1)]))
{
Sl_No_Start<-Sl_No_End+1
Sl_No_End<-Sl_No_Start+Buy_Trading_Entries$Qty[i]-1
}
else
{
Sl_No_Start<-1
Sl_No_End<-Buy_Trading_Entries$Qty[i]
}
rec  <- Buy_Trading_Entries[i,]
recm<-rec[rep(seq_len(nrow(rec)), each=Buy_Trading_Entries$Qty[i]),]
recm$Sl_No<-seq(Sl_No_Start,Sl_No_End, by=1)
Buy_Journal <- data.frame(rbind(Buy_Journal, recm))
i <- i+1
}
#Sell
i <- 1
for (i in 1:nrow(Sell_Trading_Entries))
{
if(identical(Sell_Trading_Entries$Stock[i],Sell_Trading_Entries$Stock[(i-1)]))
{
Sl_No_Start<-Sl_No_End+1
Sl_No_End<-Sl_No_Start+Sell_Trading_Entries$Qty[i]-1
}
else
{
Sl_No_Start<-1
Sl_No_End<-Sell_Trading_Entries$Qty[i]
}
rec  <- Sell_Trading_Entries[i,]
recm<-rec[rep(seq_len(nrow(rec)), each=Sell_Trading_Entries$Qty[i]),]
recm$Sl_No<-seq(Sl_No_Start,Sl_No_End, by=1)
Sell_Journal <- data.frame(rbind(Sell_Journal, recm))
i <- i+1
}
row.names(Buy_Journal)<-NULL
row.names(Sell_Journal)<-NULL
#sort by the Stock Code and date
Buy_Journal<-Buy_Journal[order(Buy_Journal$Stock,Buy_Journal$Buy_Date),]
Sell_Journal<-Sell_Journal[order(Sell_Journal$Stock,Sell_Journal$Sell_Date),]
rm(rec,recm,i,Sl_No_Start,Sl_No_End)
#Create a Buy/Sell Trade journal
Trade_Journal<-merge(Buy_Journal,Sell_Journal,by=c("Stock","Sl_No"),all.x=TRUE)
#get live quotes of stocks I am still holding and replace Sell_Price with that
Trade_Journal<-merge(Trade_Journal,Live_Share_Prices,"Stock",all.x=TRUE)
Trade_Journal$Sell_Price[is.na(Trade_Journal$Sell_Price)]<-Trade_Journal$Current.Price[is.na(Trade_Journal$Sell_Price)]
#replace current holdings Sell_Date with today's date
Trade_Journal$Sell_Date[is.na(Trade_Journal$Sell_Date)]<-Sys.Date()
Trade_Journal$Holding_Period<-as.numeric(as.Date(Trade_Journal$Sell_Date) - as.Date(Trade_Journal$Buy_Date))
Trade_Journal$Capital_Gains<-Trade_Journal$Sell_Price - Trade_Journal$Buy_Price
Trade_Journal$Cummulative_Returns<-((Trade_Journal$Sell_Price/Trade_Journal$Buy_Price)-1)*100
Trade_Journal$CAGR[Trade_Journal$Holding_Period>=365]<-((Trade_Journal$Sell_Price[Trade_Journal$Holding_Period>=365]/Trade_Journal$Buy_Price[Trade_Journal$Holding_Period>=365])^(365/Trade_Journal$Holding_Period[Trade_Journal$Holding_Period>=365])-1)*100
Trade_Journal$Current.Price<-NULL
################################
#Analyze Current share holding##
################################
Current_Share_Holdings<-ddply(Trade_Journal[is.na(Trade_Journal$Qty.y),],.(Holding_Period,Stock,Location),summarize,No_Of_Shares=length(Sl_No),Capital_Locked=sum(Buy_Price),Current_Price=sum(Sell_Price),Cummulative_Returns=round(mean(Cummulative_Returns),2),CAGR=round(mean(CAGR),2))
Current_Share_Holdings$Period_In_Mths<-cut(Current_Share_Holdings$Holding_Period, breaks=c(seq(0,1080,90),max(Current_Share_Holdings$Holding_Period)), labels=c("0-3","3-6","6-9","9-12","12-15","15-18","18-21","21-24","24-27","27-30","30-33","33-36","> 3yr"))
Live_Share_Prices<-merge(Live_Share_Prices,ddply(Current_Share_Holdings,c("Stock"),summarize,No_Of_Units=sum(No_Of_Shares),Invested=sum(Capital_Locked),Current_Value=sum(Current_Price)),by="Stock",all.x = TRUE)
View(Live_Share_Prices)
Live_Share_Prices$Value_1_yr_back<-Live_Share_Prices$Current_Value/(1+Live_Share_Prices$CAGR_1_yr)
Live_Share_Prices$Value_2_yr_back<-Live_Share_Prices$Current_Value/(1+Live_Share_Prices$CAGR_2_yr)^2
Live_Share_Prices$Value_3_yr_back<-Live_Share_Prices$Current_Value/(1+Live_Share_Prices$CAGR_3_yr)^3
View(Live_Share_Prices)
Live_Share_Prices$Value_1_yr_back<-Live_Share_Prices$Current_Value/(1+Live_Share_Prices$CAGR_1_yr/100)
Live_Share_Prices$Value_2_yr_back<-Live_Share_Prices$Current_Value/(1+Live_Share_Prices$CAGR_2_yr/100)^2
Live_Share_Prices$Value_3_yr_back<-Live_Share_Prices$Current_Value/(1+Live_Share_Prices$CAGR_3_yr/100)^3
View(Live_Share_Prices)
87839*1.237^2
temp<-Live_Share_Prices[order(Live_Share_Prices$Current_Value),c('Stock','Current_Value','Value_1_yr_back','Value_1_yr_back')]
temp
temp[nrow(temp)+1,]<-c("Total",sum(temp[,2:4]))
temp
temp<-Live_Share_Prices[order(Live_Share_Prices$Current_Value),c('Stock','Current_Value','Value_1_yr_back','Value_2_yr_back','Value_3_yr_back')]
temp[nrow(temp)+1,]<-c("Total",sum(temp[,2:4]))
temp
temp[nrow(temp)+1,]<-c("Total",sum(temp[,2:5]))
sum(temp[,2:5])
temp[nrow(temp)+1,]<-c("Total",colSums(temp[,2:5]))
temp
temp$Value_1_yr_back<-round(as.numeric(temp$Value_1_yr_back),2)
temp$Value_2_yr_back<-round(as.numeric(temp$Value_2_yr_back),2)
temp$Value_3_yr_back<-round(as.numeric(temp$Value_3_yr_back),2)
rownames(temp)<-NULL
temp
temp$Current_Value<-round(as.numeric(temp$Current_Value),2)
temp
4592716.56/3956901.61
4592716.56/2981097.62
(4592716.56/2981097.62)^(0.5)
temp(nrow(temp),)
temp
temp[nrow(temp),]
temp[nrow(temp),'Current_Value']
temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_1_yr_back']
temp1<-Live_Share_Prices[order(Live_Share_Prices$Traded.Volumes),c('Stock','CAGR_1_yr','CAGR_2_yr','CAGR_3_yr','Traded.Volumes')]
temp1
temp1[nrow(temp1)+1,]<-c("Total",100*(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_1_yr_back']-1),100*(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_2_yr_back']-1)^(1/2),100*(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_3_yr_back']-1)^(1/3))
temp1[nrow(temp1)+1,]<-c("Total",100*(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_1_yr_back']-1),100*(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_2_yr_back']-1)^(1/2),100*(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_3_yr_back']-1)^(1/3),NA)
temp1
4592716.56/2981097.62
(4592716.56/2981097.62-1)^(1/2)
(4592716.56/2981097.62-1)
srqt(4592716.56/2981097.62)
sqrt(4592716.56/2981097.62)
sqrt(4592716.56/2981097.62)-1
2981097.62*1.24*(1.24)
temp1[nrow(temp1)+1,]<-c("Total",100*(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_1_yr_back']-1),100*((temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_2_yr_back'])^(1/2)-1),100*((temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_3_yr_back'])^(1/3)-1),NA)
temp1
rm(temp1)
temp1<-Live_Share_Prices[order(Live_Share_Prices$Traded.Volumes),c('Stock','CAGR_1_yr','CAGR_2_yr','CAGR_3_yr','Traded.Volumes')]
CAGR_1_yr<-temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_1_yr_back']
CAGR_2_yr<-(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_2_yr_back'])^(1/2)
CAGR_3_yr<-(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_3_yr_back'])^(1/3)
temp1[nrow(temp1)+1,]<-c("Total",100*(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_1_yr_back']-1),100*((temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_2_yr_back'])^(1/2)-1),100*((temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_3_yr_back'])^(1/3)-1),NA)
temp1
temp1[nrow(temp1)+1,]<-c("Total",round(100*(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_1_yr_back']-1),2),round((100*((temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_2_yr_back'])^(1/2)-1)),2),round((100*((temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_3_yr_back'])^(1/3)-1)),2),NA)
temp1
temp1<-Live_Share_Prices[order(Live_Share_Prices$Traded.Volumes),c('Stock','CAGR_1_yr','CAGR_2_yr','CAGR_3_yr','Traded.Volumes')]
CAGR_1_yr<-temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_1_yr_back']
CAGR_2_yr<-(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_2_yr_back'])^(1/2)
CAGR_3_yr<-(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_3_yr_back'])^(1/3)
temp1[nrow(temp1)+1,]<-c("Total",round(100*(temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_1_yr_back']-1),2),round((100*((temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_2_yr_back'])^(1/2)-1)),2),round((100*((temp[nrow(temp),'Current_Value']/temp[nrow(temp),'Value_3_yr_back'])^(1/3)-1)),2),NA)
temp1
temp
2820486.72*1.1765^3
temp1
install.packages("knitr")
library(shiny)
require("reshape2")   # for transposing data with 'cast' and 'melt' functions
require("calibrate") # to add data labels on graphs
require("plyr")     # to do ply functions
require("forecast")  # to perform moving avarages analysis
require("zoo")  # to perform moving avarages analysis
require("psych")  # to perform exploratory factor analysis
require("graphics")
require("segmented")
require("openxlsx")
require("stats")
require("ggplot2")
# enable viewing of warning messages
options(warn=1)
# Clear all objects from R memory
rm(list=ls())
Monthly_Expense <- read.xlsx("data/Monthly Expense Tracking - ORIGINAL.xlsx",sheet=3,startRow=2,colNames=TRUE)
Monthly_Expense <- read.xlsx("C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp/datadata/Monthly Expense Tracking - ORIGINAL.xlsx",sheet=3,startRow=2,colNames=TRUE)
Monthly_Expense <- read.xlsx("C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp/data/Monthly Expense Tracking - ORIGINAL.xlsx",sheet=3,startRow=2,colNames=TRUE)
Monthly_Expense <- Monthly_Expense [!is.na(Monthly_Expense$Date),1:9]
#Summation_Categories <- read.csv("Summation Categories.csv",header=FALSE)
#convert month name to month number
Monthly_Expense$Month<-match(Monthly_Expense$Month,month.name)
Monthly_Expense$Full_Date<-as.Date(paste(Monthly_Expense$Year,Monthly_Expense$Month,Monthly_Expense$Date,sep = "." ),format="%Y.%m.%d")
Itemized_Monthly_Expense <- Monthly_Expense[,c('Full_Date','Item','Category','Amount')]
#Daily_Monthly_Expense<-ddply(Monthly_Expense,c("Full_Date"),summarize,Amount=sum(Amount))
All_Categories<-unique(Itemized_Monthly_Expense$Category)
Create_Last_Years_Expenses <- function(start_date,end_date,category)
{
index<-as.numeric(format(start_date,"%Y"))-2009
date_start<-rep(as.Date("1900-01-01"),index)
date_end<-rep(as.Date("1900-01-01"),index)
sum_of_spend<-rep(0,index)
year_start<-rep(0,index)
for (i in 1:index)
{
date_start[i]<-as.Date(paste(as.numeric(format(start_date,"%Y"))-(i-1),"-",as.numeric(format(start_date,"%m")),"-",as.numeric(format(start_date,"%d")),sep=""))
date_end[i] <-as.Date(paste(as.numeric(format(end_date,"%Y"))-(i-1),"-",as.numeric(format(end_date,"%m")),"-",as.numeric(format(end_date,"%d")),sep=""))
sum_of_spend[i] <- round(sum(Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=date_start[i]&Itemized_Monthly_Expense$Full_Date<=date_end[i]&Itemized_Monthly_Expense$Category==category,c('Full_Date','Item','Amount')][,'Amount']),2)
year_start[i] <- as.numeric(format(date_start[i],"%Y"))
}
return(data.frame(Year=year_start,Spend=sum_of_spend))
}
levels(All_Categories)
class(All_Categories)
as.factor(All_Categories)
levels(All_Categories)
levels(as.factor(All_Categories))
t<-data.frame(levels(as.factor(All_Categories)))
getwd()
write.xlsx(t)
write.xlsx(t,"categories.xlsx")
All_Categories
c("Food",
"Rent + Maintenance",
"Aparrel",
"Hair cuts",
"Car Fuel",
"Car Maintenance",
"Newspaper",
"Electricity",
"Household items",
"Family responsibilities",
"Property Tax",
"Income Tax",
"Gas",
"Internet",
"Phone",
"Cable",
"Health",
"Domestic Help",
"A beauty expenses",
"Baby",
"Baby2",
"Child's education",
"Child's education2",
"Miscellaneous",
"Books",
"Charity",
"House Repair",
"Travel to home city",
"LIC Premium",
"House Transfer expenses",
"Loan",
"New car",
"Onnoprason",
"Pregnancy",
"Delivery"
)
c("Food",
"Rent + Maintenance",
"Aparrel",
"Hair cuts",
"Car Fuel",
"Car Maintenance",
"Newspaper",
"Electricity",
"Household items",
"Family responsibilities",
"Property Tax",
"Income Tax",
"Gas",
"Internet",
"Phone",
"Cable",
"Health",
"Domestic Help",
"A beauty expenses",
"Baby",
"Baby2",
"Child's education",
"Child's education2",
"Miscellaneous",
"Books",
"Charity",
"House Repair",
"Travel to home city",
"LIC Premium",
"House Transfer expenses",
"Loan",
"New car",
"Onnoprason",
"Pregnancy",
"Delivery"
)
factor(All_Categories,levels=c("Food",
"Rent + Maintenance",
"Aparrel",
"Hair cuts",
"Car Fuel",
"Car Maintenance",
"Newspaper",
"Electricity",
"Household items",
"Family responsibilities",
"Property Tax",
"Income Tax",
"Gas",
"Internet",
"Phone",
"Cable",
"Health",
"Domestic Help",
"A beauty expenses",
"Baby",
"Baby2",
"Child's education",
"Child's education2",
"Miscellaneous",
"Books",
"Charity",
"House Repair",
"Travel to home city",
"LIC Premium",
"House Transfer expenses",
"Loan",
"New car",
"Onnoprason",
"Pregnancy",
"Delivery"
))
All_Categories
as.factor(All_Categories)
All_Categories<-as.factor(All_Categories)
relevel(All_Categories,"Food")
All_Categories
relevel(All_Categories,"Health")
levels(All_Categories)
levels(All_Categories)<-c("Food",
"Rent + Maintenance",
"Aparrel",
"Hair cuts",
"Car Fuel",
"Car Maintenance",
"Newspaper",
"Electricity",
"Household items",
"Family responsibilities",
"Property Tax",
"Income Tax",
"Gas",
"Internet",
"Phone",
"Cable",
"Health",
"Domestic Help",
"A beauty expenses",
"Baby",
"Baby2",
"Child's education",
"Child's education2",
"Miscellaneous",
"Books",
"Charity",
"House Repair",
"Travel to home city",
"LIC Premium",
"House Transfer expenses",
"Loan",
"New car",
"Onnoprason",
"Pregnancy",
"Delivery"
)
levels(All_Categories)
All_Categories
levels(All_Categories)
shiny::runApp('C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp')
shiny::runApp('C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp')
shiny::runApp('C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp')
shiny::runApp('C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp')
Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c("Food","Aparrel"),c('Full_Date','Item','Amount')
Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c("Food","Aparrel")
Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c("Food","Aparrel"),]
Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c("Food","Aparrel"),c('Full_Date','Item','Amount')]
Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c("Food","Aparrel"),c('Full_Date','Item','Amount')][,'Amount']
sum(Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c("Food","Aparrel"),c('Full_Date','Item','Amount')][,'Amount'])
sum(Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c("Food","Aparrel"),c('Full_Date','Item','Amount')][,'Amount'])
shiny::runApp('C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp')
Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c("Food","Aparrel"),c('Full_Date','Item','Amount')]
Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c("Food","Aparrel"),]
Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c("Food","Aparrel"),]$Amount
sum(Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c("Food","Aparrel"),]$Amount)
shiny::runApp('C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp')
sum(Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category=="Food",]$Amount)
sum(Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category=="Aparrel",]$Amount)
24769.21+1903
length(Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category=="Aparrel",]$Amount)
length(Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category=="Food",]$Amount)
length(Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c"Food","Aparrel"),]$Amount)
length(Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&Itemized_Monthly_Expense$Category==c("Food","Aparrel"),]$Amount)
length(Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=as.Date("2010-04-01")&Itemized_Monthly_Expense$Full_Date<=as.Date("2010-08-09")&(Itemized_Monthly_Expense$Category=="Food"|Itemized_Monthly_Expense$Category=="Aparrel"),]$Amount)
subset(Itemized_Monthly_Expense, Itemized_Monthly_Expense$Category==c("Food","Aparrel"))
subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09")&Category=="Food")
nrow(subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09")&Category=="Food"))
nrow(subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09")&Category=="Aparrel"))
nrow(subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09")&Category==c("Food",Aparrel")))
nrow(subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09")&Category==c("Food",Aparrel"))
nrow(subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09")&Category==c("Food",Aparrel"))
nrow(subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09")&Category==c("Food",Aparrel")))
subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09")&Category==c("Food",Aparrel"))
subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09"))
subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09")&Category==c("Food"))
subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09")&Category==c("Food","Aparrel"))
nrow(subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09")&Category==c("Food","Aparrel")))
nrow(subset(Itemized_Monthly_Expense, Full_Date>=as.Date("2010-04-01")&Full_Date<=as.Date("2010-08-09")&Category%in%c("Food","Aparrel")))
Create_Last_Years_Expenses <- function(start_date,end_date,category)
{
index<-as.numeric(format(start_date,"%Y"))-2009
date_start<-rep(as.Date("1900-01-01"),index)
date_end<-rep(as.Date("1900-01-01"),index)
sum_of_spend<-rep(0,index)
year_start<-rep(0,index)
for (i in 1:index)
{
date_start[i]<-as.Date(paste(as.numeric(format(start_date,"%Y"))-(i-1),"-",as.numeric(format(start_date,"%m")),"-",as.numeric(format(start_date,"%d")),sep=""))
date_end[i] <-as.Date(paste(as.numeric(format(end_date,"%Y"))-(i-1),"-",as.numeric(format(end_date,"%m")),"-",as.numeric(format(end_date,"%d")),sep=""))
sum_of_spend[i] <- round(sum(Itemized_Monthly_Expense[Itemized_Monthly_Expense$Full_Date>=date_start[i]&Itemized_Monthly_Expense$Full_Date<=date_end[i]&Itemized_Monthly_Expense$Category%in%category,c('Full_Date','Item','Amount')][,'Amount']),2)
year_start[i] <- as.numeric(format(date_start[i],"%Y"))
}
return(data.frame(Year=year_start,Spend=sum_of_spend))
}
Create_Last_Years_Expenses(as.Date("2010-04-01"),as.Date("2010-08-09"),c("Food","Aparrel"))
Create_Last_Years_Expenses(as.Date("2010-04-01"),as.Date("2010-08-09"),c("Food"))
Create_Last_Years_Expenses(as.Date("2010-04-01"),as.Date("2010-08-09"),c("Aparrel"))
shiny::runApp('C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp')
library(shinyapps)
setwd("C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp")
deployApp()
shiny::runApp()
shiny::runApp()
library(shinyapps)
setwd("C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp")
deployApp()
c("Food",
"Rent + Maintenance",
"Aparrel",
"Hair cuts",
"Car Fuel",
"Car Maintenance",
"Newspaper",
"Electricity",
"Household items",
"Family responsibilities",
"Domestic Help",
"Gas",
"Internet",
"Phone",
"Cable",
"Health",
"Baby",
"Baby2",
"House Repair",
"A beauty expenses",
"Miscellaneous",
"Books")
shiny::runApp()
library(shinyapps)
setwd("C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp")
deployApp()
library(shinyapps)
setwd("C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp")
deployApp()
library(shinyapps)
setwd("C:/Abhijay/Analytics use cases/Monthly expense analysis/Monthly expense analysis/R code/MonthlyExpenseApp")
deployApp()
